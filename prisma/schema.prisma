// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id               Int       @id @default(autoincrement())
  name             String
  email            String    @unique
  password         String
  // Relationships
  sentMessages     Message[] @relation("UserSentMessages")
  receivedMessages Message[] @relation("UserReceivedMessages")
  createdAt        DateTime  @default(now()) // Timestamp for user creation
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  sentAt     DateTime @default(now())
  isRead     Boolean  @default(false)
  senderId   Int
  receiverId Int
  sender     User     @relation("UserSentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("UserReceivedMessages", fields: [receiverId], references: [id])

  @@index([senderId, receiverId])
  @@index([receiverId, isRead]) // For unread messages fetching
}

model GlobalMessege {
  senderId String   @id
  content  String
  sentAt   DateTime @default(now())
}

// model User {
//   id            Int       @id @default(autoincrement())
//   username      String    @unique
//   email         String    @unique
//   passwordHash  String
//   createdAt     DateTime  @default(now())
//   lastLogin     DateTime?
//   sentMessages  Message[]
//   chatMemberships ChatMember[]
// }

// model Chat {
//   id        Int      @id @default(autoincrement())
//   name      String?
//   type      ChatType
//   createdAt DateTime @default(now())
//   messages  Message[]
//   members   ChatMember[]
// }

// model ChatMember {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   chatId    Int
//   role      MemberRole @default(MEMBER)
//   joinedAt  DateTime @default(now())
//   user      User     @relation(fields: [userId], references: [id])
//   chat      Chat     @relation(fields: [chatId], references: [id])

//   @@unique([userId, chatId])
// }

// model Message {
//   id        Int      @id @default(autoincrement())
//   content   String
//   sentAt    DateTime @default(now())
//   senderId  Int
//   chatId    Int
//   sender    User     @relation(fields: [senderId], references: [id])
//   chat      Chat     @relation(fields: [chatId], references: [id])

//   @@index([chatId, sentAt])
// }

// enum ChatType {
//   DIRECT
//   GROUP
// }

// enum MemberRole {
//   MEMBER
//   ADMIN
//   OWNER
// }
